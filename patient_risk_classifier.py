# -*- coding: utf-8 -*-
"""Patient_Risk_Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WMdPPZ0-ebkemmW1wKnCqzFqZdbtEJ-z
"""

pip install mlflow

"""Import necessary libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, f1_score, classification_report
import mlflow
import mlflow.sklearn

"""Load the dataset"""

import pandas as pd

df = pd.read_csv('/content/patient (1).csv')
df = df.dropna()
df = df.drop(columns=["Patient ID", "Timestamp"])
df.head()

"""Encode categorical variables"""

label_encoders = {}
for col in ['Gender', 'Risk Category']:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

X = df.drop(columns=["Risk Category"]) #Features
y = df["Risk Category"] #Target

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

from mlflow.models.signature import infer_signature
signature = infer_signature(X_train, model.predict(X_train))

"""Mlp Hyperparameters"""

mlp_params = {
    "hidden_layer_sizes": (64, 32),  # Two hidden layers: first with 64 neurons, second with 32 neurons
    "activation": "relu",
    "solver": "adam",
    "alpha": 0.0001,                 # To prevent overfitting
    "learning_rate": "constant",
    "max_iter": 200,                # Epochs
    "random_state": 42
}

"""Start Mlflow experiment"""

mlflow.set_experiment("Patient_Risk_Classification")

with mlflow.start_run():
    # Log Parameters
    for param, value in mlp_params.items():
        mlflow.log_param(param, value)

    # Train Model
    model = MLPClassifier(**mlp_params)
    model.fit(X_train, y_train)

    # Predictions
    y_pred = model.predict(X_test)

    # Evaluation
    acc = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    # Log Metrics
    mlflow.log_metric("accuracy", acc)
    mlflow.log_metric("f1_score", f1)

    # Log Model
    mlflow.sklearn.log_model(
    sk_model=model,
    artifact_path="mlp_model",
    input_example= X_train,
    signature=signature
)

print("Classification Report:\n")
print(classification_report(y_test, y_pred, target_names=label_encoders['Risk Category'].classes_))



